name: Build

on:
    push:
        branches:
            - '*'
        paths:
            - "**/*.js"
            - "**/*.vue"
            - "frontend/package.json"
            - "frontend/.env*"
            - "**/*.go"
            - "go.mod"
            - "go.sum"
            - ".github/workflows/*.yml"
            - "resources/*"
    pull_request:
        types: [ opened, synchronize, reopened ]
        paths:
            - "**/*.js"
            - "**/*.vue"
            - "frontend/package.json"
            - "frontend/.env*"
            - "**/*.go"
            - "go.mod"
            - "go.sum"
            - ".github/workflows/*.yml"
    release:
        types:
            - published

jobs:
    build_frontend:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Set up nodejs
                uses: actions/setup-node@v3
                with:
                    node-version: 18.x
                    cache: 'yarn'
                    cache-dependency-path: 'frontend/yarn.lock'

            -   name: Install dependencies
                run: yarn install
                working-directory: frontend

            -   name: Update translations
                run: yarn gettext:compile
                working-directory: frontend

            -   name: Build
                run: |
                    npx browserslist@latest --update-db
                    yarn build
                working-directory: frontend

            -   name: Archive frontend artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: frontend-dist
                    path: frontend/dist

            -   name: Prepare publish
                if: github.event_name == 'release'
                run: |
                    cp README*.md frontend/dist
                    find frontend/dist -printf '%P\n' | tar -C frontend/dist --no-recursion -zcvf frontend-dist.tar.gz -T -

            -   name: Publish
                uses: softprops/action-gh-release@v1
                if: github.event_name == 'release'
                with:
                    files: frontend-dist.tar.gz

    build:
        runs-on: ubuntu-latest
        needs: build_frontend
        strategy:
            matrix:
                goos: [ linux, darwin ]
                goarch: [ amd64, 386, arm64 ]
                exclude:
                    # Exclude i386 on darwin.
                    -   goarch: 386
                        goos: darwin
                include:
                    # BEGIN Linux ARM 5 6 7
                    -   goos: linux
                        goarch: arm-7
                    -   goos: linux
                        goarch: arm-6
                    -   goos: linux
                        goarch: arm-5
                    # END Linux ARM 5 6 7
                    # BEGIN Other architectures
                    -   goos: darwin
                        goarch: arm64
                    -   goos: linux
                        goarch: arm64
                    # BEGIN MIPS
                    -   goos: linux
                        goarch: mips64
                    -   goos: linux
                        goarch: mips64le
                    -   goos: linux
                        goarch: mipsle
                    -   goos: linux
                        goarch: mips
                    # END MIPS
        env:
            GOOS: ${{ matrix.goos }}
            GOARCH: ${{ matrix.goarch }}
        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Show workflow information
                run: |
                    echo "GOOS: $GOOS, GOARCH: $GOARCH"
                    echo "BUILD_TIME=$(date +%FT%T%z)" >> $GITHUB_ENV

            -   name: Download frontend artifacts
                uses: actions/download-artifact@v3
                with:
                    name: frontend-dist
                    path: frontend/dist

            -   name: Build
                uses: crazy-max/ghaction-xgo@v2
                with:
                    xgo_version: latest
                    go_version: 1.20.0
                    dest: dist
                    prefix: nginx-ui
                    targets: ${{ matrix.goos }}/${{ matrix.goarch }}
                    v: true
                    x: true
                    race: false
                    ldflags: -s -w -X 'github.com/0xJacky/Nginx-UI/server/settings.buildTime=$(date +%s)'
                    buildmode: default
                    trimpath: true

            -   name: Rename executable file
                run: |
                    cd ./dist || exit 1
                    mv nginx-ui-$GOOS-$GOARCH* nginx-ui

            -   name: Archive backend artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: ${{ env.ARTIFACT }}
                    path: dist/nginx-ui

            -   name: Prepare publish
                if: github.event_name == 'release'
                run: |
                    cp README*.md ./dist
                    find dist -printf '%P\n' | tar -C dist --no-recursion -zcvf ${{ env.DIST }}.tar.gz -T -

            -   name: Publish
                uses: softprops/action-gh-release@v1
                if: github.event_name == 'release'
                with:
                    files: ${{ env.DIST }}.tar.gz

    docker-build:
        runs-on: ubuntu-latest
        needs: build
        env:
            PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6,linux/arm/v5
        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Get the version
                id: get_version
                run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

            -   name: Download artifacts
                uses: actions/download-artifact@v3
                with:
                    path: ./dist

            -   name: Prepare Artifacts
                run: chmod +x ./dist/nginx-ui-*/nginx-ui

            -   name: Set up Docker Buildx
                id: buildx
                uses: docker/setup-buildx-action@v2

            -   name: Login to DockerHub
                uses: docker/login-action@v2
                with:
                    username: ${{ secrets.DOCKERHUB_USER }}
                    password: ${{ secrets.DOCKERHUB_TOKEN }}

            -   name: Prepare Dockerfile
                if: github.event_name == 'release'
                run: |
                    cp ./Dockerfile ./dist
                    cp -rp ./resources ./dist

            -   name: Build and push
                if: github.event_name == 'release'
                uses: docker/build-push-action@v3
                with:
                    context: ./dist
                    file: ./dist/Dockerfile
                    platforms: ${{ env.PLATFORMS }}
                    push: ${{ github.event_name != 'pull_request' }}
                    tags: |
                        uozi/nginx-ui:latest
                        uozi/nginx-ui:${{ steps.get_version.outputs.VERSION }}

            -   name: Prepare Demo Dockerfile
                run: |
                    cp ./demo.Dockerfile ./dist
                    cp -rp ./resources ./dist

            -   name: Build and push demo
                uses: docker/build-push-action@v3
                with:
                    context: ./dist
                    file: ./dist/demo.Dockerfile
                    platforms: ${{ env.PLATFORMS }}
                    push: ${{ github.event_name != 'pull_request' }}
                    tags: |
                        uozi/nginx-ui-demo:latest
